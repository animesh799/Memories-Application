{"version":3,"sources":["Places/Pages/NewPlace.js"],"names":["NewPlace","history","useHistory","authCtx","useContext","AuthContext","useHttp","isLoading","error","onCancelHandler","sendRequest","useForm","title","value","isValid","description","address","image","formState","inputChangeHandler","inputSubmitHandler","event","preventDefault","formdata","FormData","append","input","process","Authorization","token","push","Fragment","onClear","className","onSubmit","asOverlay","id","element","label","errorText","validators","VALIDATOR_REQUIRE","onInput","VALIDATOR_MINLENGTH","center","disabled","formIsValid","type"],"mappings":"miNA2JeA,UAjHE,WACf,IAAMC,EAAUC,cACVC,EAAUC,qBAAWC,KAC3B,EAA2DC,cAAnDC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,gBAAiBC,EAA3C,EAA2CA,YAC3C,EAAwCC,YACtC,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,GAEXE,QAAS,CACPH,MAAO,GACPC,SAAS,GAEXG,MAAM,CACJJ,MAAO,KACPC,SAAS,KAGb,GAnBF,mBAAOI,EAAP,KAAkBC,EAAlB,KAmCMC,EAAkB,uCAAG,WAAOC,GAAP,8EACzBA,EAAMC,iBADmB,UAIjBC,EAAW,IAAIC,UACZC,OAAO,QAASP,EAAUQ,MAAMd,MAAMC,OAC/CU,EAASE,OAAO,cAAeP,EAAUQ,MAAMX,YAAYF,OAC3DU,EAASE,OAAO,UAAWP,EAAUQ,MAAMV,QAAQH,OACnDU,EAASE,OAAO,QAASP,EAAUQ,MAAMT,MAAMJ,OARxB,SASjBH,EAAYiB,oDAEhB,OACAJ,EAAS,CACPK,cAAc,UAAUzB,EAAQ0B,QAbb,OAgBvB5B,EAAQ6B,KAAK,KAhBU,4GAAH,sDA4BxB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAYvB,MAAOA,EAAOwB,QAASvB,IACnC,0BAAMwB,UAAU,aAAaC,SAAUd,GACpCb,GAAa,kBAAC,IAAD,CAAgB4B,WAAS,IACvC,kBAAC,IAAD,CACEC,GAAG,QACHC,QAAQ,QACRC,MAAM,QACNC,UAAU,8BACVC,WAAY,CAACC,eACbC,QAASvB,IAGX,kBAAC,IAAD,CACEiB,GAAG,cACHC,QAAQ,WACRC,MAAM,cACNC,UAAU,uDACVC,WAAY,CAACC,cAAqBE,YAAoB,IACtDD,QAASvB,IAEX,kBAAC,IAAD,CACAoB,UAAU,+BACVK,QAAM,EACNF,QAASvB,EACTiB,GAAG,UAIH,kBAAC,IAAD,CACEA,GAAG,UACHC,QAAQ,QACRC,MAAM,UACNC,UAAU,iCACVC,WAAY,CAACC,eACbC,QAASvB,IAEX,kBAAC,IAAD,CAAQ0B,UAAW3B,EAAU4B,YAAaC,KAAK,UAA/C","file":"static/js/8.d2d23727.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\r\nimport \"./PlaceForm.css\";\r\nimport Input from \"../../Shared/FormElements/Input\";\r\n\r\nimport Button from \"../../Shared/FormElements/Button\";\r\nimport { useForm } from \"../../Shared/hooks/form-hook\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../Shared/Components/utils/validators\";\r\nimport useHttp from \"../../Shared/hooks/http-hook\";\r\nimport LoadingSpinner from \"../../Shared/Components/Utility/LoadingSpinner\";\r\nimport { AuthContext } from \"../../Shared/Components/Context/Auth-context\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ErrorModal from \"../../Shared/Components/Utility/ErrorModal\";\r\nimport ImageUpload from \"../../Shared/FormElements/ImageUpload\";\r\n\r\n// const inputReducer = (state, action) => {\r\n//   switch (action.type) {\r\n//     case \"INPUT_CHANGE\":\r\n//       let formIsValid = true;\r\n//       for (const inputId in state.input) {\r\n//         if (action.inputId === inputId) {\r\n//           formIsValid = formIsValid && action.isValid;\r\n//         } else {\r\n//           formIsValid = formIsValid && state.input[inputId].isValid;\r\n//         }\r\n//       }\r\n//       return {\r\n//         ...state,\r\n//         input: {\r\n//           ...state.input,\r\n//           [action.inputId]: { value: action.value, isValid: action.isValid },\r\n//         },\r\n//         formIsValid: formIsValid,\r\n//       };\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst NewPlace = () => {\r\n  const history = useHistory();\r\n  const authCtx = useContext(AuthContext);\r\n  const { isLoading, error, onCancelHandler, sendRequest } = useHttp();\r\n  const [formState, inputChangeHandler] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      address: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      image:{\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n  // const [formState, dispatch] = useReducer(inputReducer, {\r\n  //   input: {\r\n  //     title: {\r\n  //       value: \"\",\r\n  //       isValid: false,\r\n  //     },\r\n  //     description: {\r\n  //       value: \"\",\r\n  //       isValid: false,\r\n  //     },\r\n  //   },\r\n  //   formIsValid: false,\r\n  // });\r\n\r\n  const inputSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const formdata = new FormData();\r\n      formdata.append(\"title\", formState.input.title.value);\r\n      formdata.append(\"description\", formState.input.description.value);\r\n      formdata.append(\"address\", formState.input.address.value);\r\n      formdata.append(\"image\", formState.input.image.value);\r\n      await sendRequest(process.env.REACT_APP_BACKEND_ADDRESS+\r\n        \"/places\",\r\n        \"POST\",\r\n        formdata,{\r\n          Authorization:\"bearer \"+authCtx.token\r\n        }\r\n      );\r\n      history.push(\"/\");\r\n    } catch (err) {}\r\n  };\r\n\r\n  // const inputStateHandler = useCallback((id, value, isValid) => {\r\n  //   dispatch({\r\n  //     type: \"INPUT_CHANGE\",\r\n  //     inputId: id,\r\n  //     value: value,\r\n  //     isValid: isValid,\r\n  //   });\r\n  // }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={onCancelHandler}></ErrorModal>\r\n      <form className=\"place-form\" onSubmit={inputSubmitHandler}>\r\n        {isLoading && <LoadingSpinner asOverlay></LoadingSpinner>}\r\n        <Input\r\n          id=\"title\"\r\n          element=\"input\"\r\n          label=\"Title\"\r\n          errorText=\"Please enter the valid text\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          onInput={inputChangeHandler}\r\n        ></Input>\r\n\r\n        <Input\r\n          id=\"description\"\r\n          element=\"textarea\"\r\n          label=\"Description\"\r\n          errorText=\"Please enter the valid description maybe 5 char long\"\r\n          validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(5)]}\r\n          onInput={inputChangeHandler}\r\n        ></Input>\r\n        <ImageUpload\r\n        errorText=\"Please pick valid image file\"\r\n        center\r\n        onInput={inputChangeHandler}\r\n        id=\"image\">\r\n\r\n        </ImageUpload>\r\n\r\n        <Input\r\n          id=\"address\"\r\n          element=\"input\"\r\n          label=\"Address\"\r\n          errorText=\"Please enter the valid Address\"\r\n          validators={[VALIDATOR_REQUIRE()]}\r\n          onInput={inputChangeHandler}\r\n        ></Input>\r\n        <Button disabled={!formState.formIsValid} type=\"submit\">\r\n          ADD PLACE\r\n        </Button>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPlace;\r\n"],"sourceRoot":""}